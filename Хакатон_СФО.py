import logging
import os
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.input_file import InputFile
from dotenv import load_dotenv

from stt import STT
from aiogram.types import ContentType
from PyPDF2 import PdfReader
from docx import Document

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞


stt = STT()

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start , /help
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å—Ç–Ω—ã–π –ò–ò —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –æ—Ç MMC.co!"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ –≤ –∞—É–¥–∏–æ, docx, pdf —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª, –≤—ã–¥–µ–ª—è—è –≥–ª–∞–≤–Ω–æ–µ!"
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test
@dp.message_handler(commands="test")
async def cmd_test(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
    """
    await message.answer("Test")


# –§—É–Ω–∫—Ü–∏—è –ò–ò —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
async def ai_answer(text: str, message: types.Message):
    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try:
        await message.answer("–ò–ò –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ —á–∞–µ–∫...")
        from g4f.client import Client
        client = Client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "Businessman", "content": "Select the main things from the text, summarize and structure this things. Be sure to highlight the characters of the dialogues. Use only Russian. Text:" + text}],
        )
        await message.answer(response.choices[0].message.content)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    try:
        await message.answer("–°–µ–π—á–∞—Å —è –ø–æ–ø—ã—Ç–∞—é—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞...")
        from g4f.client import Client
        client = Client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "SheduleTask_maker", "content": "Create shedule of the tasks by the text. Use only Russian. Text:" + text}],
        )
        await message.answer(response.choices[0].message.content)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á.")

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    try:
        await message.answer("–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...")
        from g4f.client import Client
        client = Client()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "SheduleTask_maker", "content": "Create a formatted little protocol table based on the text. Use only Russian. Text:" + text}],
        )
        await message.answer(response.choices[0].message.content)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=[types.ContentType.TEXT])
async def cmd_text(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    """
    await message.reply("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é")
    await ai_answer(message.text, message)







# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
def extract_text_from_pdf(file_path):
    text = ""
    with open(file_path, "rb") as file:
        pdf = PdfReader(file)
        for page in pdf.pages:
            text += page.extract_text() or ""
    return text
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def extract_text_from_word(file_path):
    text = ""
    doc = Document(file_path)
    for paragraph in doc.paragraphs:
        text += paragraph.text + "\n"
    return text

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message_handler(content_types=[
    ContentType.VOICE,
    ContentType.AUDIO,
    ContentType.DOCUMENT
])
async def message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    if message.content_type == ContentType.VOICE:
        file_id = message.voice.file_id
    elif message.content_type == ContentType.AUDIO:
        file_id = message.audio.file_id
    elif message.content_type == ContentType.DOCUMENT:
        file_id = message.document.file_id
        file_name = message.document.file_name
    else:
        await message.reply("‚ùå–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return

    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_on_disk = Path("", f"{file_id}.tmp")
    await bot.download_file(file_path, destination=file_on_disk)
    await message.reply("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é")

    if message.content_type in [ContentType.VOICE, ContentType.AUDIO]:
        text = stt.audio_to_text(file_on_disk)
        if not text:
            text = "‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ"
            await message.answer(text)
        else:
            await message.answer("üéôÔ∏è–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n" + text)
            await ai_answer(text, message)
    elif message.content_type == ContentType.DOCUMENT:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç
        if file_name.endswith('.txt'):
            with open(file_on_disk, 'r', encoding='utf-8') as file:
                text = file.read()
        elif file_name.endswith('.pdf'):
            text = extract_text_from_pdf(file_on_disk)
        elif file_name.endswith('.docx'):
            text = extract_text_from_word(file_on_disk)
        else:
            text = "‚ùå–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        
        if text:
            await message.answer("‚úíÔ∏è–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n" + text)
            await ai_answer(text, message)

    os.remove(file_on_disk)



if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û")
    try:
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        pass
